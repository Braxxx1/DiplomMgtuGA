# callbacks/analysis.py
import dash_bootstrap_components as dbc
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.figure_factory as ff
from dash import Input, Output, State, dash_table, dcc, html, no_update


def register_analysis_callbacks(app):
    # 1. –í–∫–ª–∞–¥–∫–∞ "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" ‚Üí –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    @app.callback(
        Output("plot-type-container", "children"),
        Input("tabs", "value"),
        Input("column-dropdown", "value"),
        State("data-store", "data")
    )
    def show_plot_selector(tab, column, data):
        if tab != "distribution" or data is None or column is None:
            return None
        df = pd.DataFrame(data)
        is_numeric = pd.api.types.is_numeric_dtype(df[column])
        options = [{"label": "üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "value": "histogram"}]
        if is_numeric:
            options += [
                {"label": "üîµ KDE-–≥—Ä–∞—Ñ–∏–∫", "value": "density"},
                {"label": "üéª Violin-–≥—Ä–∞—Ñ–∏–∫", "value": "violin"},
                {"label": "‚ö´ Scatter-–≥—Ä–∞—Ñ–∏–∫", "value": "scatter"},
            ]
        return html.Div([
            html.Label("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:", className="mb-2 fw-bold"),
            dcc.RadioItems(
                id="plot-type",
                options=options,
                value="histogram",
                labelStyle={"display": "block", "margin-bottom": "8px"},
                inputStyle={"margin-right": "8px"},
                className="mb-3"
            )
        ], style={
            "backgroundColor": "#f8f9fa",
            "padding": "12px",
            "borderRadius": "8px",
            "border": "1px solid #dee2e6",
            "marginBottom": "10px"
        })

    # 2. –í—ã–±–æ—Ä y –¥–ª—è scatter
    @app.callback(
        Output("scatter-y-dropdown-container", "children"),
        Input("plot-type", "value"),
        State("column-dropdown", "value"),
        State("data-store", "data")
    )
    def show_scatter_dropdown(plot_type, x_col, data):
        if plot_type != "scatter" or data is None:
            return None
        df = pd.DataFrame(data)
        numeric_columns = df.select_dtypes("number").columns
        options = [{"label": col, "value": col} for col in numeric_columns if col != x_col]
        if not options:
            return None
        return html.Div([
            html.Label("–°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å:", className="fw-bold mb-1"),
            dcc.Dropdown(
                id="scatter-y-column",
                options=options,
                value=options[0]["value"],
                clearable=False,
                className="mb-3"
            )
        ])

    # 3. –ì–ª–∞–≤–Ω—ã–π –∫–æ–ª–ª–±—ç–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    @app.callback(
        Output("graph-container", "children"),
        Output("summary-container", "children"),
        Input("column-dropdown", "value"),
        Input("tabs", "value"),
        Input("plot-type", "value"),
        Input("scatter-y-column", "value"),
        Input("corr-threshold", "value"),
        State("data-store", "data"),
        prevent_initial_call=True
    )
    def update_graph(column, tab, plot_type, scatter_y, threshold, data):
        if not column or data is None:
            return no_update, no_update
        df = pd.DataFrame(data)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        if tab == "distribution":
            if plot_type == "histogram":
                fig = px.histogram(df, x=column, nbins=30, title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {column}")
            elif plot_type == "density":
                if pd.api.types.is_numeric_dtype(df[column]):
                    fig = px.density_contour(df, x=column, title=f"KDE-–≥—Ä–∞—Ñ–∏–∫: {column}")
                else:
                    fig = px.histogram(df, x=column, title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ: {column}")
            elif plot_type == "violin":
                if pd.api.types.is_numeric_dtype(df[column]):
                    fig = px.violin(df, y=column, box=True, points="all", title=f"Violin-–≥—Ä–∞—Ñ–∏–∫: {column}")
                else:
                    fig = {}
            elif plot_type == "scatter":
                if scatter_y and all(pd.api.types.is_numeric_dtype(df[col]) for col in [column, scatter_y]):
                    fig = px.scatter(df, x=column, y=scatter_y, title=f"Scatter: {column} vs {scatter_y}")
                else:
                    fig = {}
            else:
                fig = {}

        # –í—ã–±—Ä–æ—Å—ã
        elif tab == "outliers":
            if pd.api.types.is_numeric_dtype(df[column]):
                fig = px.box(df, y=column, points="outliers", title=f"Boxplot: {column}")
            else:
                fig = None

        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        elif tab == "correlation":
            corr = df.select_dtypes("number").corr().round(2)
            if threshold > 0:
                np.fill_diagonal(corr.values, 0)
                mask = corr.abs() >= threshold
                keep = mask.any(axis=0)
                corr = corr.loc[keep, keep]
                np.fill_diagonal(corr.values, 1)

            if corr.empty or corr.shape[0] < 2:
                fig = None
            else:
                z = corr.values
                x = corr.columns.tolist()
                y = corr.index.tolist()
                annotations = [[f"{val:.2f}" if pd.notna(val) else "" for val in row] for row in z]

                fig = ff.create_annotated_heatmap(
                    z=z,
                    x=x,
                    y=y,
                    annotation_text=annotations,
                    colorscale="RdBu",
                    showscale=True
                )
                fig.update_layout(
                    title={
                        'text': f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (|corr| > {threshold})",
                        'x': 0.5, 'y': 0.97,
                        'xanchor': 'center', 'yanchor': 'top'
                    },
                    margin=dict(t=140),  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø
                    title_font=dict(size=18)
                )

        # –ü—Ä–æ–ø—É—Å–∫–∏
        elif tab == "missing":
            missing = df.isna().sum()
            missing = missing[missing > 0].sort_values(ascending=False)
            fig = px.bar(x=missing.index, y=missing.values, title="–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º")
            total_missing = df.isna().sum().sum()
            cols_with_nan = (df.isna().sum() > 0).sum()
            percent = (total_missing / (df.shape[0] * df.shape[1])) * 100
            stats = dbc.ListGroup([
                dbc.ListGroupItem(f"üî¢ –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {total_missing}"),
                dbc.ListGroupItem(f"üìå –°—Ç–æ–ª–±—Ü–æ–≤ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏: {cols_with_nan}"),
                dbc.ListGroupItem(f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –æ—Ç –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã: {percent:.2f}%")
            ])
        
        elif tab == "duplicates":
            duplicated_rows = df[df.duplicated()]
            if not duplicated_rows.empty:
                dup_counts = df.duplicated(subset=None, keep=False).value_counts()
                count = df.duplicated().sum()

                fig = px.bar(
                    x=["–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ", "–î—É–±–ª–∏–∫–∞—Ç—ã"],
                    y=[len(df) - count, count],
                    labels={"x": "–¢–∏–ø —Å—Ç—Ä–æ–∫", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"},
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ"
                )

            else:
                fig = None

            
            stats = dbc.ListGroup([
                dbc.ListGroupItem(f"üìé –ö–æ–ª-–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {df.duplicated().sum()}"),
                dbc.ListGroupItem(f"üî¢ –û–±—â–µ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫: {len(df)}"),
                dbc.ListGroupItem(f"üßÆ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(df.drop_duplicates())}")
            ])


        
        else:
            fig = None

        # –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if tab == "missing":
            pass
        elif tab == "correlation":
            stats = html.Div("‚ÑπÔ∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –≤—Å–µ–º —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º.", style={"paddingTop": "10px"})
        elif tab == "duplicates":
            pass
        else:
            summary = df[column].describe()
            if pd.api.types.is_numeric_dtype(df[column]):
                stats = dbc.ListGroup([
                    
                    dbc.ListGroupItem(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: {summary['count']:.0f}"),
                    dbc.ListGroupItem(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {summary['mean']:.2f}"),
                    dbc.ListGroupItem(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {summary['std']:.2f}"),
                    dbc.ListGroupItem(f"–ú–∏–Ω–∏–º—É–º: {summary['min']:.2f}"),
                    dbc.ListGroupItem(f"25-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {summary['25%']:.2f}"),
                    dbc.ListGroupItem(f"–ú–µ–¥–∏–∞–Ω–∞ (50%): {summary['50%']:.2f}"),
                    dbc.ListGroupItem(f"75-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {summary['75%']:.2f}"),
                    dbc.ListGroupItem(f"–ú–∞–∫—Å–∏–º—É–º: {summary['max']:.2f}")
                ])
            else:
                stats = dbc.ListGroup([
                    dbc.ListGroupItem(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π: {summary['count']}"),
                    dbc.ListGroupItem(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {summary['unique']}"),
                    dbc.ListGroupItem(f"–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {summary['top']}"),
                    dbc.ListGroupItem(f"–ß–∞—Å—Ç–æ—Ç–∞: {summary['freq']}")
                ])

        # –ì—Ä–∞—Ñ–∏–∫
        if fig:
            graph = dcc.Graph(figure=fig)
        else:
            message = {
                "missing": "‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                "outliers": "‚ö†Ô∏è Boxplot –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.",
                "distribution": "‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            }.get(tab, "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            graph = html.Div(message, style={"color": "darkred", "paddingTop": "20px"})
        return [graph], stats
